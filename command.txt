# kousoku5.ino シリアルコマンドフォーマット仕様

## 概要
Arduino Uno用のステッピングモータ制御プログラム（kousoku5.ino）で使用される
シリアル通信コマンドの仕様書です。

## 基本フォーマット
```
[STX][PUMP][ACTION][VALUE][CHECKSUM][ETX]
```

## 詳細仕様

| 位置 | サイズ | 内容 | 値 |
|------|--------|------|-----|
| 0 | 1バイト | スタートバイト | `0x02` (STX) |
| 1 | 1バイト | ポンプ番号 | `'1'`, `'2'`, `'3'` |
| 2 | 1バイト | アクション | 各種コマンド（後述） |
| 3-8 | 6バイト | 値（6桁の数字文字列） | `"000000"` 〜 `"999999"` |
| 9 | 1バイト | チェックサム | XOR計算値 |
| 10 | 1バイト | 終了バイト | `0x03` (ETX) |

## チェックサム計算
```cpp
checksum = cmd[1] ^ cmd[2] ^ cmd[3] ^ cmd[4] ^ cmd[5] ^ cmd[6] ^ cmd[7] ^ cmd[8]
```

## サポートされているアクション

| アクション | 説明 | 値の意味 | 例 |
|------------|------|----------|-----|
| `'M'` | モータ開始 | ステップ数（0=無限動作） | `"000100"` = 100ステップ |
| `'S'` | 停止 | 未使用（000000） | `"000000"` |
| `'F'` | 正転 | 未使用（000000） | `"000000"` |
| `'R'` | 逆転 | 未使用（000000） | `"000000"` |
| `'V'` | 速度変更 | RPM値 | `"00300"` = 300 RPM |
| `'E'` | Enable ON | 未使用（000000） | `"000000"` |
| `'D'` | Enable OFF | 未使用（000000） | `"000000"` |
| `'A'` | 台形加速ON/OFF | 0=OFF, 1=ON | `"000001"` = ON |
| `'C'` | 電流データ取得 | 未使用（000000） | `"000000"` |

## コマンド例

### 1. ポンプ1を100ステップ動作（台形加速ON）
```
0x02 '1' 'M' "000100" [checksum] 0x03
```

### 2. ポンプ2を停止
```
0x02 '2' 'S' "000000" [checksum] 0x03
```

### 3. ポンプ3を逆転に設定
```
0x02 '3' 'R' "000000" [checksum] 0x03
```

### 4. ポンプ1の速度を300RPMに変更
```
0x02 '1' 'V' "000300" [checksum] 0x03
```

### 5. ポンプ2の台形加速をON
```
0x02 '2' 'A' "000001" [checksum] 0x03
```

### 6. ポンプ1の電流データを取得
```
0x02 '1' 'C' "000000" [checksum] 0x03
```

## 特徴

1. **固定長フォーマット**: 常に11バイト
2. **エラー検出**: XORチェックサムによる誤り検出
3. **3ポンプ対応**: ポンプ1〜3まで制御可能
4. **台形加速制御**: アクション`'A'`で台形加速のON/OFF制御
5. **無限動作**: ステップ数0で無限動作モード
6. **即座反映**: 速度変更は即座に反映される
7. **電流検知機能**: 2ms毎にサンプリング、50回分のデータを格納

## 通信設定

- **ボーレート**: 9600 bps
- **データビット**: 8
- **パリティ**: なし
- **ストップビット**: 1

## 注意事項

- コマンドは完全な11バイトを受信してから処理されます
- 不正なチェックサムの場合はコマンドが無視されます
- 存在しないポンプ番号（1-3以外）の場合は無視されます
- 台形加速モードでは、モータの加速・減速が滑らかになります
- 等速モードでは、即座に指定速度で動作します
- 電流検知は2ms毎にサンプリングされ、50回分のデータを循環バッファに格納します
- 電流データ取得コマンド（'C'）はJSON形式で統計情報を返します

## 電流検知機能詳細

### センサ仕様
- **センサ**: ACS712
- **入力ピン**: A0, A1, A2（各ポンプ対応）
- **ADC分解能**: 10bit（0-1023）
- **基準電圧**: 5V
- **オフセット電圧**: 2.5V（電流0A時）
- **感度**: 185mV/A

### サンプリング仕様
- **サンプリング間隔**: 2ms
- **データ格納数**: 50回分
- **バッファ方式**: 循環バッファ
- **データ形式**: int型（電流値[mA]）

### 電流データ取得コマンド（'C'）
アクション `'C'` を送信すると、以下のJSON形式で電流データの統計情報が返されます：

```json
{
  "pump": 1,
  "current": {
    "avg": 125,
    "max": 250,
    "min": 50,
    "samples": 50,
    "buffer_full": true
  }
}
```

- `avg`: 平均電流値 [mA]
- `max`: 最大電流値 [mA]
- `min`: 最小電流値 [mA]
- `samples`: サンプル数
- `buffer_full`: バッファが満杯かどうか

## 関連ファイル

- `kousoku5.ino`: Arduino制御プログラム
- `app.py`: Python Webサーバー（コマンド送信機能付き）
- `com_test.py`: シンプルなテスト用プログラム
